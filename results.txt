Group 9 (Team Management Assignment - CSC 3301)
Team Members:
- Cossam Soko
- Fidelis Musamba
- Musengah Nyondo
- Blessings Mwandira
- Chela Maivune
- Mwamba Mwila

Class name: Main
Total number of tokens: 5823
EQ: 12
WHILE: 4
RETURN: 2
COMMA: 30
BREAK: 5
PUBLIC: 8
RBRACKET: 17
NEW: 5
ASSIGN: 39
INTEGER_LITERAL: 38
CASE: 6
LT: 1
FALSE: 8
IMPORT: 1
BANG: 5
DOT: 104
LBRACE: 54
ELSE: 16
NE: 2
CONTINUE: 1
STRING_LITERAL: 48
_DEFAULT: 2
SINGLE_LINE_COMMENT: 44
CLASS: 1
IF: 21
LPAREN: 115
RBRACE: 54
INCR: 5
FOR: 3
INT: 14
DO: 3
EOF: 1
PLUSASSIGN: 1
WINDOWS_EOL: 293
SEMICOLON: 112
LBRACKET: 17
COLON: 10
SWITCH: 2
TRUE: 5
BOOLEAN: 5
VOID: 5
RPAREN: 115
IDENTIFIER: 337
STATIC: 7
SC_OR: 3
NULL: 1
SPACE: 4241


ParserMainAST
Class name: Main
Class AST:
ClassOrInterfaceDeclaration: public class Main {

    // this is the main method that runs when the project is opened
    public static void main(String[] args) {
        // instantiate two scanner objects, call some useful methods and close the scanners
        Scanner inputOne = new Scanner(System.in);
        Scanner inputTwo = new Scanner(System.in);
        login(welcome(inputOne), inputTwo);
        inputOne.close();
        inputTwo.close();
    }

    // method to welcome the user and recognize their type of privillage
    public static int welcome(Scanner input) {
        // initialize some useful variables
        boolean flag;
        int counter = 0;
        int userOption = 0;
        System.out.print("************ Hello there, Welcome to Team Manager ************\n Choose one option to login:\n 1. Manager\n 2. Member\n 3. Help\n Whats your choice? ");
        // check if user has entered a valid option otherwise give them 3 attempts
        do {
            if (input.hasNextInt()) {
                userOption = input.nextInt();
                flag = true;
            } else {
                flag = false;
                counter++;
                // check if the user has reached the 3 attempts
                if (counter == 3) {
                    System.out.println("Too many attemps, Try again later!");
                    System.exit(0);
                } else {
                    System.out.print("You entered an invalid option! Try again: ");
                    input.next();
                }
            }
        } while (!(flag));
        // return user option
        return userOption;
    }

    // method to handle user login after knowing their privillage type from welcome()
    public static void login(int userOption, Scanner input) {
        // initialize usernames and their pins (Could be improved using Polymorphism)
        String[] memberUsernames = { "Manager", "Blessings", "Musengah", "Cossam", "Chela", "Mwamba" };
        String[] tasks = new String[5];
        int[] memberPins = { 1234, 1234, 1234, 1234, 1234, 1234 };
        // check the type of user trying to login and call the appropriate login method
        switch(userOption) {
            case 1:
                userLogin(input, memberUsernames, memberPins, tasks);
                break;
            case 2:
                userLogin(input, memberUsernames, memberPins, tasks);
                break;
            case 3:
                help();
                break;
            default:
                System.out.println("You entered an option that does exist! Try again later...");
                System.exit(0);
        }
    }

    // Method for the user login algorithm
    public static void userLogin(Scanner input, String[] usernames, int[] passwords, String[] tasks) {
        // initialize some useful variables
        boolean flag = false;
        int userOption1 = 0;
        String userOption2 = "";
        int counter = 0;
        boolean userExists = false;
        int totalUsernames = usernames.length;
        // ask the user to enter their username
        System.out.print("Enter your username: ");
        userOption2 += input.nextLine();
        for (int i = 0; i < totalUsernames; i++) {
            // check if the user entered a valid username, if true ask for their pin
            if (userOption2.equals(usernames[i])) {
                System.out.print("Enter your pin: ");
                // check if they have entered a valid pin (int)
                do {
                    if (input.hasNextInt()) {
                        userOption1 = input.nextInt();
                        // give the user three pin attempts
                        if (userOption1 == passwords[i]) {
                            flag = true;
                        } else {
                            // increase counter to keep track of attempts
                            counter++;
                            // check if the user has exhausted the 3 attempts
                            if (counter == 3) {
                                System.out.println("Too many attemps, Try again next time");
                                System.exit(0);
                            } else {
                                System.out.print("Your entered an invalid pin! Try again: ");
                            }
                        }
                    } else {
                        flag = false;
                        counter++;
                        // check if the user has exhausted the 3 attempts
                        if (counter == 3) {
                            System.out.println("Too many attemps, Try again next time");
                            System.exit(0);
                        } else {
                            System.out.print("Your entered an invalid pin! Try again: ");
                            input.next();
                        }
                    }
                } while (!(flag));
                // check if the entered password matches with the one stored
                if (userOption1 == passwords[i]) {
                    System.out.printf("\n************ Welcome %s ************", usernames[i]);
                    // instantiate scanner object and call appropriate methods for post user login functionality
                    Scanner inputThree = new Scanner(System.in);
                    String currentUser = usernames[i];
                    postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
                    inputThree.close();
                } else {
                    System.out.println("The pin you entered is incorrect! Try again later...");
                    System.exit(0);
                }
                // check user existance in database
                userExists = true;
            } else if (userOption2.equals("")) {
                System.out.println("Invalid username! Try again later...");
                System.exit(0);
            } else {
            }
        }
        // check if user exists, otherwise exit the program
        if (!userExists) {
            System.out.println("The username you entered does not exist! Try again later...");
            System.exit(0);
        }
    }

    // method for functionality after user is signed in
    public static void postLogin(int userOption, String[] usernames, String currentUser, String[] tasks) {
        // instatiate Scanner and initialize variables
        Scanner inputFour = new Scanner(System.in);
        int count = 0;
        boolean flag = true;
        String proceed = "n";
        String askForTask = "y";
        switch(userOption) {
            case 1:
                // check if current user is a Manager or ordinary team member
                if (currentUser == "Manager") {
                    System.out.println("\n************ Assign Members Tasks ************");
                    while (flag) {
                        // ask manager to assign members tasks they can pick from (Max = 5)
                        if (count != 5) {
                            System.out.print("What task do you want to assign your team? ");
                            String task = inputFour.nextLine();
                            tasks[count] = task;
                            // check if user has reached 5 tasks and terminate loop
                            if (count == 4)
                                askForTask = "n";
                        } else {
                            flag = false;
                        }
                        // check if user has reached 5 tasks
                        if (askForTask != "n") {
                            System.out.print("\nAdd another task? (y/n): ");
                            proceed = inputFour.nextLine();
                        }
                        // check if user does not want to add tasks
                        if (!proceed.equals("y")) {
                            flag = false;
                        }
                        // increase count to limit manager to only 5 tasks
                        count++;
                    }
                } else {
                    // output tasks for team members so that they can pick what they can do
                    System.out.println("\n************ Pick One Task From The List ************");
                    if (tasks[0] == null) {
                        System.out.println("There are no tasks to do yet, check back later!");
                    } else {
                        for (String task : tasks) {
                            System.out.println(task);
                        }
                    }
                }
                break;
            case 2:
                // check if the current user is a team manager or not and customize output accondingly
                if (currentUser == "Admin") {
                    System.out.println("\nHere is your team to manage: ");
                } else {
                    System.out.println("\nHere are your teammates: ");
                }
                // output team members and skip session user and Manager
                for (String username : usernames) {
                    if (username.equals(currentUser) || username.equals("Manager")) {
                        continue;
                    }
                    System.out.println(username);
                }
                break;
            case 3:
                System.out.println("You have succefully been logged out, see you soon!");
                System.exit(0);
            default:
                System.out.println("You entered an option that does exist! you have been logged ou, try again later...");
                System.exit(0);
        }
        // close Scanner to avoid resource leak
        inputFour.close();
    }

    // method for post login user menu
    public static int userMenu(Scanner input, String currentUser) {
        // initialize some useful variables
        boolean flag = false;
        int userOption = 0;
        // view team members, view tasks, logout and menu customization based on user privillage
        if (currentUser.equals("Manager")) {
            System.out.print("\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? ");
        } else {
            System.out.print("\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? ");
        }
        // check if user has entered a valid option
        do {
            if (input.hasNextInt()) {
                userOption = input.nextInt();
                // check if the option is on the menu
                if (userOption == 1 || userOption == 2 || userOption == 3) {
                    flag = true;
                } else {
                    System.out.print("You entered an invalid option! Try again: ");
                }
            } else {
                flag = false;
                System.out.print("You entered an invalid option! Try again: ");
                input.next();
            }
        } while (!(flag));
        // return user option
        return userOption;
    }

    // method for the help menu
    public static void help() {
        // tackle some FAQ's, more can be added of course
        System.out.println("\n************ Welcome to the help Menu ************");
        System.out.println("Here are some of the frequently asked questions (FAQ's): ");
        System.out.println("What is this program used for? ");
        System.out.println("Team Manager is a program used to manage small teams, usually 5, and enable them to work efficiently.");
    }
}
  Modifier: public 
  SimpleName: Main
  MethodDeclaration: // this is the main method that runs when the project is opened
public static void main(String[] args) {
    // instantiate two scanner objects, call some useful methods and close the scanners
    Scanner inputOne = new Scanner(System.in);
    Scanner inputTwo = new Scanner(System.in);
    login(welcome(inputOne), inputTwo);
    inputOne.close();
    inputTwo.close();
}
    Modifier: public 
    Modifier: static 
    SimpleName: main
    Parameter: String[] args
      ArrayType: String[]
        ClassOrInterfaceType: String
          SimpleName: String
      SimpleName: args
    VoidType: void
    BlockStmt: {
    // instantiate two scanner objects, call some useful methods and close the scanners
    Scanner inputOne = new Scanner(System.in);
    Scanner inputTwo = new Scanner(System.in);
    login(welcome(inputOne), inputTwo);
    inputOne.close();
    inputTwo.close();
}
      ExpressionStmt: // instantiate two scanner objects, call some useful methods and close the scanners
Scanner inputOne = new Scanner(System.in);
        VariableDeclarationExpr: Scanner inputOne = new Scanner(System.in)
          VariableDeclarator: inputOne = new Scanner(System.in)
            ClassOrInterfaceType: Scanner
              SimpleName: Scanner
            SimpleName: inputOne
            ObjectCreationExpr: new Scanner(System.in)
              ClassOrInterfaceType: Scanner
                SimpleName: Scanner
              FieldAccessExpr: System.in
                NameExpr: System
                  SimpleName: System
                SimpleName: in
      ExpressionStmt: Scanner inputTwo = new Scanner(System.in);
        VariableDeclarationExpr: Scanner inputTwo = new Scanner(System.in)
          VariableDeclarator: inputTwo = new Scanner(System.in)
            ClassOrInterfaceType: Scanner
              SimpleName: Scanner
            SimpleName: inputTwo
            ObjectCreationExpr: new Scanner(System.in)
              ClassOrInterfaceType: Scanner
                SimpleName: Scanner
              FieldAccessExpr: System.in
                NameExpr: System
                  SimpleName: System
                SimpleName: in
      ExpressionStmt: login(welcome(inputOne), inputTwo);
        MethodCallExpr: login(welcome(inputOne), inputTwo)
          SimpleName: login
          MethodCallExpr: welcome(inputOne)
            SimpleName: welcome
            NameExpr: inputOne
              SimpleName: inputOne
          NameExpr: inputTwo
            SimpleName: inputTwo
      ExpressionStmt: inputOne.close();
        MethodCallExpr: inputOne.close()
          NameExpr: inputOne
            SimpleName: inputOne
          SimpleName: close
      ExpressionStmt: inputTwo.close();
        MethodCallExpr: inputTwo.close()
          NameExpr: inputTwo
            SimpleName: inputTwo
          SimpleName: close
  MethodDeclaration: // method to welcome the user and recognize their type of privillage
public static int welcome(Scanner input) {
    // initialize some useful variables
    boolean flag;
    int counter = 0;
    int userOption = 0;
    System.out.print("************ Hello there, Welcome to Team Manager ************\n Choose one option to login:\n 1. Manager\n 2. Member\n 3. Help\n Whats your choice? ");
    // check if user has entered a valid option otherwise give them 3 attempts
    do {
        if (input.hasNextInt()) {
            userOption = input.nextInt();
            flag = true;
        } else {
            flag = false;
            counter++;
            // check if the user has reached the 3 attempts
            if (counter == 3) {
                System.out.println("Too many attemps, Try again later!");
                System.exit(0);
            } else {
                System.out.print("You entered an invalid option! Try again: ");
                input.next();
            }
        }
    } while (!(flag));
    // return user option
    return userOption;
}
    Modifier: public 
    Modifier: static 
    SimpleName: welcome
    Parameter: Scanner input
      ClassOrInterfaceType: Scanner
        SimpleName: Scanner
      SimpleName: input
    PrimitiveType: int
    BlockStmt: {
    // initialize some useful variables
    boolean flag;
    int counter = 0;
    int userOption = 0;
    System.out.print("************ Hello there, Welcome to Team Manager ************\n Choose one option to login:\n 1. Manager\n 2. Member\n 3. Help\n Whats your choice? ");
    // check if user has entered a valid option otherwise give them 3 attempts
    do {
        if (input.hasNextInt()) {
            userOption = input.nextInt();
            flag = true;
        } else {
            flag = false;
            counter++;
            // check if the user has reached the 3 attempts
            if (counter == 3) {
                System.out.println("Too many attemps, Try again later!");
                System.exit(0);
            } else {
                System.out.print("You entered an invalid option! Try again: ");
                input.next();
            }
        }
    } while (!(flag));
    // return user option
    return userOption;
}
      ExpressionStmt: // initialize some useful variables
boolean flag;
        VariableDeclarationExpr: boolean flag
          VariableDeclarator: flag
            PrimitiveType: boolean
            SimpleName: flag
      ExpressionStmt: int counter = 0;
        VariableDeclarationExpr: int counter = 0
          VariableDeclarator: counter = 0
            PrimitiveType: int
            SimpleName: counter
            IntegerLiteralExpr: 0
      ExpressionStmt: int userOption = 0;
        VariableDeclarationExpr: int userOption = 0
          VariableDeclarator: userOption = 0
            PrimitiveType: int
            SimpleName: userOption
            IntegerLiteralExpr: 0
      ExpressionStmt: System.out.print("************ Hello there, Welcome to Team Manager ************\n Choose one option to login:\n 1. Manager\n 2. Member\n 3. Help\n Whats your choice? ");
        MethodCallExpr: System.out.print("************ Hello there, Welcome to Team Manager ************\n Choose one option to login:\n 1. Manager\n 2. Member\n 3. Help\n Whats your choice? ")
          FieldAccessExpr: System.out
            NameExpr: System
              SimpleName: System
            SimpleName: out
          SimpleName: print
          StringLiteralExpr: "************ Hello there, Welcome to Team Manager ************\n Choose one option to login:\n 1. Manager\n 2. Member\n 3. Help\n Whats your choice? "
      DoStmt: // check if user has entered a valid option otherwise give them 3 attempts
do {
    if (input.hasNextInt()) {
        userOption = input.nextInt();
        flag = true;
    } else {
        flag = false;
        counter++;
        // check if the user has reached the 3 attempts
        if (counter == 3) {
            System.out.println("Too many attemps, Try again later!");
            System.exit(0);
        } else {
            System.out.print("You entered an invalid option! Try again: ");
            input.next();
        }
    }
} while (!(flag));
        BlockStmt: {
    if (input.hasNextInt()) {
        userOption = input.nextInt();
        flag = true;
    } else {
        flag = false;
        counter++;
        // check if the user has reached the 3 attempts
        if (counter == 3) {
            System.out.println("Too many attemps, Try again later!");
            System.exit(0);
        } else {
            System.out.print("You entered an invalid option! Try again: ");
            input.next();
        }
    }
}
          IfStmt: if (input.hasNextInt()) {
    userOption = input.nextInt();
    flag = true;
} else {
    flag = false;
    counter++;
    // check if the user has reached the 3 attempts
    if (counter == 3) {
        System.out.println("Too many attemps, Try again later!");
        System.exit(0);
    } else {
        System.out.print("You entered an invalid option! Try again: ");
        input.next();
    }
}
            MethodCallExpr: input.hasNextInt()
              NameExpr: input
                SimpleName: input
              SimpleName: hasNextInt
            BlockStmt: {
    userOption = input.nextInt();
    flag = true;
}
              ExpressionStmt: userOption = input.nextInt();
                AssignExpr: userOption = input.nextInt()
                  NameExpr: userOption
                    SimpleName: userOption
                  MethodCallExpr: input.nextInt()
                    NameExpr: input
                      SimpleName: input
                    SimpleName: nextInt
              ExpressionStmt: flag = true;
                AssignExpr: flag = true
                  NameExpr: flag
                    SimpleName: flag
                  BooleanLiteralExpr: true
            BlockStmt: {
    flag = false;
    counter++;
    // check if the user has reached the 3 attempts
    if (counter == 3) {
        System.out.println("Too many attemps, Try again later!");
        System.exit(0);
    } else {
        System.out.print("You entered an invalid option! Try again: ");
        input.next();
    }
}
              ExpressionStmt: flag = false;
                AssignExpr: flag = false
                  NameExpr: flag
                    SimpleName: flag
                  BooleanLiteralExpr: false
              ExpressionStmt: counter++;
                UnaryExpr: counter++
                  NameExpr: counter
                    SimpleName: counter
              IfStmt: // check if the user has reached the 3 attempts
if (counter == 3) {
    System.out.println("Too many attemps, Try again later!");
    System.exit(0);
} else {
    System.out.print("You entered an invalid option! Try again: ");
    input.next();
}
                BinaryExpr: counter == 3
                  NameExpr: counter
                    SimpleName: counter
                  IntegerLiteralExpr: 3
                BlockStmt: {
    System.out.println("Too many attemps, Try again later!");
    System.exit(0);
}
                  ExpressionStmt: System.out.println("Too many attemps, Try again later!");
                    MethodCallExpr: System.out.println("Too many attemps, Try again later!")
                      FieldAccessExpr: System.out
                        NameExpr: System
                          SimpleName: System
                        SimpleName: out
                      SimpleName: println
                      StringLiteralExpr: "Too many attemps, Try again later!"
                  ExpressionStmt: System.exit(0);
                    MethodCallExpr: System.exit(0)
                      NameExpr: System
                        SimpleName: System
                      SimpleName: exit
                      IntegerLiteralExpr: 0
                BlockStmt: {
    System.out.print("You entered an invalid option! Try again: ");
    input.next();
}
                  ExpressionStmt: System.out.print("You entered an invalid option! Try again: ");
                    MethodCallExpr: System.out.print("You entered an invalid option! Try again: ")
                      FieldAccessExpr: System.out
                        NameExpr: System
                          SimpleName: System
                        SimpleName: out
                      SimpleName: print
                      StringLiteralExpr: "You entered an invalid option! Try again: "
                  ExpressionStmt: input.next();
                    MethodCallExpr: input.next()
                      NameExpr: input
                        SimpleName: input
                      SimpleName: next
        UnaryExpr: !(flag)
          EnclosedExpr: (flag)
            NameExpr: flag
              SimpleName: flag
      ReturnStmt: // return user option
return userOption;
        NameExpr: userOption
          SimpleName: userOption
  MethodDeclaration: // method to handle user login after knowing their privillage type from welcome()
public static void login(int userOption, Scanner input) {
    // initialize usernames and their pins (Could be improved using Polymorphism)
    String[] memberUsernames = { "Manager", "Blessings", "Musengah", "Cossam", "Chela", "Mwamba" };
    String[] tasks = new String[5];
    int[] memberPins = { 1234, 1234, 1234, 1234, 1234, 1234 };
    // check the type of user trying to login and call the appropriate login method
    switch(userOption) {
        case 1:
            userLogin(input, memberUsernames, memberPins, tasks);
            break;
        case 2:
            userLogin(input, memberUsernames, memberPins, tasks);
            break;
        case 3:
            help();
            break;
        default:
            System.out.println("You entered an option that does exist! Try again later...");
            System.exit(0);
    }
}
    Modifier: public 
    Modifier: static 
    SimpleName: login
    Parameter: int userOption
      PrimitiveType: int
      SimpleName: userOption
    Parameter: Scanner input
      ClassOrInterfaceType: Scanner
        SimpleName: Scanner
      SimpleName: input
    VoidType: void
    BlockStmt: {
    // initialize usernames and their pins (Could be improved using Polymorphism)
    String[] memberUsernames = { "Manager", "Blessings", "Musengah", "Cossam", "Chela", "Mwamba" };
    String[] tasks = new String[5];
    int[] memberPins = { 1234, 1234, 1234, 1234, 1234, 1234 };
    // check the type of user trying to login and call the appropriate login method
    switch(userOption) {
        case 1:
            userLogin(input, memberUsernames, memberPins, tasks);
            break;
        case 2:
            userLogin(input, memberUsernames, memberPins, tasks);
            break;
        case 3:
            help();
            break;
        default:
            System.out.println("You entered an option that does exist! Try again later...");
            System.exit(0);
    }
}
      ExpressionStmt: // initialize usernames and their pins (Could be improved using Polymorphism)
String[] memberUsernames = { "Manager", "Blessings", "Musengah", "Cossam", "Chela", "Mwamba" };
        VariableDeclarationExpr: String[] memberUsernames = { "Manager", "Blessings", "Musengah", "Cossam", "Chela", "Mwamba" }
          VariableDeclarator: memberUsernames = { "Manager", "Blessings", "Musengah", "Cossam", "Chela", "Mwamba" }
            ArrayType: String[]
              ClassOrInterfaceType: String
                SimpleName: String
            SimpleName: memberUsernames
            ArrayInitializerExpr: { "Manager", "Blessings", "Musengah", "Cossam", "Chela", "Mwamba" }
              StringLiteralExpr: "Manager"
              StringLiteralExpr: "Blessings"
              StringLiteralExpr: "Musengah"
              StringLiteralExpr: "Cossam"
              StringLiteralExpr: "Chela"
              StringLiteralExpr: "Mwamba"
      ExpressionStmt: String[] tasks = new String[5];
        VariableDeclarationExpr: String[] tasks = new String[5]
          VariableDeclarator: tasks = new String[5]
            ArrayType: String[]
              ClassOrInterfaceType: String
                SimpleName: String
            SimpleName: tasks
            ArrayCreationExpr: new String[5]
              ClassOrInterfaceType: String
                SimpleName: String
              ArrayCreationLevel: [5]
                IntegerLiteralExpr: 5
      ExpressionStmt: int[] memberPins = { 1234, 1234, 1234, 1234, 1234, 1234 };
        VariableDeclarationExpr: int[] memberPins = { 1234, 1234, 1234, 1234, 1234, 1234 }
          VariableDeclarator: memberPins = { 1234, 1234, 1234, 1234, 1234, 1234 }
            ArrayType: int[]
              PrimitiveType: int
            SimpleName: memberPins
            ArrayInitializerExpr: { 1234, 1234, 1234, 1234, 1234, 1234 }
              IntegerLiteralExpr: 1234
              IntegerLiteralExpr: 1234
              IntegerLiteralExpr: 1234
              IntegerLiteralExpr: 1234
              IntegerLiteralExpr: 1234
              IntegerLiteralExpr: 1234
      SwitchStmt: // check the type of user trying to login and call the appropriate login method
switch(userOption) {
    case 1:
        userLogin(input, memberUsernames, memberPins, tasks);
        break;
    case 2:
        userLogin(input, memberUsernames, memberPins, tasks);
        break;
    case 3:
        help();
        break;
    default:
        System.out.println("You entered an option that does exist! Try again later...");
        System.exit(0);
}
        NameExpr: userOption
          SimpleName: userOption
        SwitchEntry: case 1:
    userLogin(input, memberUsernames, memberPins, tasks);
    break;

          IntegerLiteralExpr: 1
          ExpressionStmt: userLogin(input, memberUsernames, memberPins, tasks);
            MethodCallExpr: userLogin(input, memberUsernames, memberPins, tasks)
              SimpleName: userLogin
              NameExpr: input
                SimpleName: input
              NameExpr: memberUsernames
                SimpleName: memberUsernames
              NameExpr: memberPins
                SimpleName: memberPins
              NameExpr: tasks
                SimpleName: tasks
          BreakStmt: break;
        SwitchEntry: case 2:
    userLogin(input, memberUsernames, memberPins, tasks);
    break;

          IntegerLiteralExpr: 2
          ExpressionStmt: userLogin(input, memberUsernames, memberPins, tasks);
            MethodCallExpr: userLogin(input, memberUsernames, memberPins, tasks)
              SimpleName: userLogin
              NameExpr: input
                SimpleName: input
              NameExpr: memberUsernames
                SimpleName: memberUsernames
              NameExpr: memberPins
                SimpleName: memberPins
              NameExpr: tasks
                SimpleName: tasks
          BreakStmt: break;
        SwitchEntry: case 3:
    help();
    break;

          IntegerLiteralExpr: 3
          ExpressionStmt: help();
            MethodCallExpr: help()
              SimpleName: help
          BreakStmt: break;
        SwitchEntry: default:
    System.out.println("You entered an option that does exist! Try again later...");
    System.exit(0);

          ExpressionStmt: System.out.println("You entered an option that does exist! Try again later...");
            MethodCallExpr: System.out.println("You entered an option that does exist! Try again later...")
              FieldAccessExpr: System.out
                NameExpr: System
                  SimpleName: System
                SimpleName: out
              SimpleName: println
              StringLiteralExpr: "You entered an option that does exist! Try again later..."
          ExpressionStmt: System.exit(0);
            MethodCallExpr: System.exit(0)
              NameExpr: System
                SimpleName: System
              SimpleName: exit
              IntegerLiteralExpr: 0
  MethodDeclaration: // Method for the user login algorithm
public static void userLogin(Scanner input, String[] usernames, int[] passwords, String[] tasks) {
    // initialize some useful variables
    boolean flag = false;
    int userOption1 = 0;
    String userOption2 = "";
    int counter = 0;
    boolean userExists = false;
    int totalUsernames = usernames.length;
    // ask the user to enter their username
    System.out.print("Enter your username: ");
    userOption2 += input.nextLine();
    for (int i = 0; i < totalUsernames; i++) {
        // check if the user entered a valid username, if true ask for their pin
        if (userOption2.equals(usernames[i])) {
            System.out.print("Enter your pin: ");
            // check if they have entered a valid pin (int)
            do {
                if (input.hasNextInt()) {
                    userOption1 = input.nextInt();
                    // give the user three pin attempts
                    if (userOption1 == passwords[i]) {
                        flag = true;
                    } else {
                        // increase counter to keep track of attempts
                        counter++;
                        // check if the user has exhausted the 3 attempts
                        if (counter == 3) {
                            System.out.println("Too many attemps, Try again next time");
                            System.exit(0);
                        } else {
                            System.out.print("Your entered an invalid pin! Try again: ");
                        }
                    }
                } else {
                    flag = false;
                    counter++;
                    // check if the user has exhausted the 3 attempts
                    if (counter == 3) {
                        System.out.println("Too many attemps, Try again next time");
                        System.exit(0);
                    } else {
                        System.out.print("Your entered an invalid pin! Try again: ");
                        input.next();
                    }
                }
            } while (!(flag));
            // check if the entered password matches with the one stored
            if (userOption1 == passwords[i]) {
                System.out.printf("\n************ Welcome %s ************", usernames[i]);
                // instantiate scanner object and call appropriate methods for post user login functionality
                Scanner inputThree = new Scanner(System.in);
                String currentUser = usernames[i];
                postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
                inputThree.close();
            } else {
                System.out.println("The pin you entered is incorrect! Try again later...");
                System.exit(0);
            }
            // check user existance in database
            userExists = true;
        } else if (userOption2.equals("")) {
            System.out.println("Invalid username! Try again later...");
            System.exit(0);
        } else {
        }
    }
    // check if user exists, otherwise exit the program
    if (!userExists) {
        System.out.println("The username you entered does not exist! Try again later...");
        System.exit(0);
    }
}
    Modifier: public 
    Modifier: static 
    SimpleName: userLogin
    Parameter: Scanner input
      ClassOrInterfaceType: Scanner
        SimpleName: Scanner
      SimpleName: input
    Parameter: String[] usernames
      ArrayType: String[]
        ClassOrInterfaceType: String
          SimpleName: String
      SimpleName: usernames
    Parameter: int[] passwords
      ArrayType: int[]
        PrimitiveType: int
      SimpleName: passwords
    Parameter: String[] tasks
      ArrayType: String[]
        ClassOrInterfaceType: String
          SimpleName: String
      SimpleName: tasks
    VoidType: void
    BlockStmt: {
    // initialize some useful variables
    boolean flag = false;
    int userOption1 = 0;
    String userOption2 = "";
    int counter = 0;
    boolean userExists = false;
    int totalUsernames = usernames.length;
    // ask the user to enter their username
    System.out.print("Enter your username: ");
    userOption2 += input.nextLine();
    for (int i = 0; i < totalUsernames; i++) {
        // check if the user entered a valid username, if true ask for their pin
        if (userOption2.equals(usernames[i])) {
            System.out.print("Enter your pin: ");
            // check if they have entered a valid pin (int)
            do {
                if (input.hasNextInt()) {
                    userOption1 = input.nextInt();
                    // give the user three pin attempts
                    if (userOption1 == passwords[i]) {
                        flag = true;
                    } else {
                        // increase counter to keep track of attempts
                        counter++;
                        // check if the user has exhausted the 3 attempts
                        if (counter == 3) {
                            System.out.println("Too many attemps, Try again next time");
                            System.exit(0);
                        } else {
                            System.out.print("Your entered an invalid pin! Try again: ");
                        }
                    }
                } else {
                    flag = false;
                    counter++;
                    // check if the user has exhausted the 3 attempts
                    if (counter == 3) {
                        System.out.println("Too many attemps, Try again next time");
                        System.exit(0);
                    } else {
                        System.out.print("Your entered an invalid pin! Try again: ");
                        input.next();
                    }
                }
            } while (!(flag));
            // check if the entered password matches with the one stored
            if (userOption1 == passwords[i]) {
                System.out.printf("\n************ Welcome %s ************", usernames[i]);
                // instantiate scanner object and call appropriate methods for post user login functionality
                Scanner inputThree = new Scanner(System.in);
                String currentUser = usernames[i];
                postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
                inputThree.close();
            } else {
                System.out.println("The pin you entered is incorrect! Try again later...");
                System.exit(0);
            }
            // check user existance in database
            userExists = true;
        } else if (userOption2.equals("")) {
            System.out.println("Invalid username! Try again later...");
            System.exit(0);
        } else {
        }
    }
    // check if user exists, otherwise exit the program
    if (!userExists) {
        System.out.println("The username you entered does not exist! Try again later...");
        System.exit(0);
    }
}
      ExpressionStmt: // initialize some useful variables
boolean flag = false;
        VariableDeclarationExpr: boolean flag = false
          VariableDeclarator: flag = false
            PrimitiveType: boolean
            SimpleName: flag
            BooleanLiteralExpr: false
      ExpressionStmt: int userOption1 = 0;
        VariableDeclarationExpr: int userOption1 = 0
          VariableDeclarator: userOption1 = 0
            PrimitiveType: int
            SimpleName: userOption1
            IntegerLiteralExpr: 0
      ExpressionStmt: String userOption2 = "";
        VariableDeclarationExpr: String userOption2 = ""
          VariableDeclarator: userOption2 = ""
            ClassOrInterfaceType: String
              SimpleName: String
            SimpleName: userOption2
            StringLiteralExpr: ""
      ExpressionStmt: int counter = 0;
        VariableDeclarationExpr: int counter = 0
          VariableDeclarator: counter = 0
            PrimitiveType: int
            SimpleName: counter
            IntegerLiteralExpr: 0
      ExpressionStmt: boolean userExists = false;
        VariableDeclarationExpr: boolean userExists = false
          VariableDeclarator: userExists = false
            PrimitiveType: boolean
            SimpleName: userExists
            BooleanLiteralExpr: false
      ExpressionStmt: int totalUsernames = usernames.length;
        VariableDeclarationExpr: int totalUsernames = usernames.length
          VariableDeclarator: totalUsernames = usernames.length
            PrimitiveType: int
            SimpleName: totalUsernames
            FieldAccessExpr: usernames.length
              NameExpr: usernames
                SimpleName: usernames
              SimpleName: length
      ExpressionStmt: // ask the user to enter their username
System.out.print("Enter your username: ");
        MethodCallExpr: System.out.print("Enter your username: ")
          FieldAccessExpr: System.out
            NameExpr: System
              SimpleName: System
            SimpleName: out
          SimpleName: print
          StringLiteralExpr: "Enter your username: "
      ExpressionStmt: userOption2 += input.nextLine();
        AssignExpr: userOption2 += input.nextLine()
          NameExpr: userOption2
            SimpleName: userOption2
          MethodCallExpr: input.nextLine()
            NameExpr: input
              SimpleName: input
            SimpleName: nextLine
      ForStmt: for (int i = 0; i < totalUsernames; i++) {
    // check if the user entered a valid username, if true ask for their pin
    if (userOption2.equals(usernames[i])) {
        System.out.print("Enter your pin: ");
        // check if they have entered a valid pin (int)
        do {
            if (input.hasNextInt()) {
                userOption1 = input.nextInt();
                // give the user three pin attempts
                if (userOption1 == passwords[i]) {
                    flag = true;
                } else {
                    // increase counter to keep track of attempts
                    counter++;
                    // check if the user has exhausted the 3 attempts
                    if (counter == 3) {
                        System.out.println("Too many attemps, Try again next time");
                        System.exit(0);
                    } else {
                        System.out.print("Your entered an invalid pin! Try again: ");
                    }
                }
            } else {
                flag = false;
                counter++;
                // check if the user has exhausted the 3 attempts
                if (counter == 3) {
                    System.out.println("Too many attemps, Try again next time");
                    System.exit(0);
                } else {
                    System.out.print("Your entered an invalid pin! Try again: ");
                    input.next();
                }
            }
        } while (!(flag));
        // check if the entered password matches with the one stored
        if (userOption1 == passwords[i]) {
            System.out.printf("\n************ Welcome %s ************", usernames[i]);
            // instantiate scanner object and call appropriate methods for post user login functionality
            Scanner inputThree = new Scanner(System.in);
            String currentUser = usernames[i];
            postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
            inputThree.close();
        } else {
            System.out.println("The pin you entered is incorrect! Try again later...");
            System.exit(0);
        }
        // check user existance in database
        userExists = true;
    } else if (userOption2.equals("")) {
        System.out.println("Invalid username! Try again later...");
        System.exit(0);
    } else {
    }
}
        VariableDeclarationExpr: int i = 0
          VariableDeclarator: i = 0
            PrimitiveType: int
            SimpleName: i
            IntegerLiteralExpr: 0
        BinaryExpr: i < totalUsernames
          NameExpr: i
            SimpleName: i
          NameExpr: totalUsernames
            SimpleName: totalUsernames
        UnaryExpr: i++
          NameExpr: i
            SimpleName: i
        BlockStmt: {
    // check if the user entered a valid username, if true ask for their pin
    if (userOption2.equals(usernames[i])) {
        System.out.print("Enter your pin: ");
        // check if they have entered a valid pin (int)
        do {
            if (input.hasNextInt()) {
                userOption1 = input.nextInt();
                // give the user three pin attempts
                if (userOption1 == passwords[i]) {
                    flag = true;
                } else {
                    // increase counter to keep track of attempts
                    counter++;
                    // check if the user has exhausted the 3 attempts
                    if (counter == 3) {
                        System.out.println("Too many attemps, Try again next time");
                        System.exit(0);
                    } else {
                        System.out.print("Your entered an invalid pin! Try again: ");
                    }
                }
            } else {
                flag = false;
                counter++;
                // check if the user has exhausted the 3 attempts
                if (counter == 3) {
                    System.out.println("Too many attemps, Try again next time");
                    System.exit(0);
                } else {
                    System.out.print("Your entered an invalid pin! Try again: ");
                    input.next();
                }
            }
        } while (!(flag));
        // check if the entered password matches with the one stored
        if (userOption1 == passwords[i]) {
            System.out.printf("\n************ Welcome %s ************", usernames[i]);
            // instantiate scanner object and call appropriate methods for post user login functionality
            Scanner inputThree = new Scanner(System.in);
            String currentUser = usernames[i];
            postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
            inputThree.close();
        } else {
            System.out.println("The pin you entered is incorrect! Try again later...");
            System.exit(0);
        }
        // check user existance in database
        userExists = true;
    } else if (userOption2.equals("")) {
        System.out.println("Invalid username! Try again later...");
        System.exit(0);
    } else {
    }
}
          IfStmt: // check if the user entered a valid username, if true ask for their pin
if (userOption2.equals(usernames[i])) {
    System.out.print("Enter your pin: ");
    // check if they have entered a valid pin (int)
    do {
        if (input.hasNextInt()) {
            userOption1 = input.nextInt();
            // give the user three pin attempts
            if (userOption1 == passwords[i]) {
                flag = true;
            } else {
                // increase counter to keep track of attempts
                counter++;
                // check if the user has exhausted the 3 attempts
                if (counter == 3) {
                    System.out.println("Too many attemps, Try again next time");
                    System.exit(0);
                } else {
                    System.out.print("Your entered an invalid pin! Try again: ");
                }
            }
        } else {
            flag = false;
            counter++;
            // check if the user has exhausted the 3 attempts
            if (counter == 3) {
                System.out.println("Too many attemps, Try again next time");
                System.exit(0);
            } else {
                System.out.print("Your entered an invalid pin! Try again: ");
                input.next();
            }
        }
    } while (!(flag));
    // check if the entered password matches with the one stored
    if (userOption1 == passwords[i]) {
        System.out.printf("\n************ Welcome %s ************", usernames[i]);
        // instantiate scanner object and call appropriate methods for post user login functionality
        Scanner inputThree = new Scanner(System.in);
        String currentUser = usernames[i];
        postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
        inputThree.close();
    } else {
        System.out.println("The pin you entered is incorrect! Try again later...");
        System.exit(0);
    }
    // check user existance in database
    userExists = true;
} else if (userOption2.equals("")) {
    System.out.println("Invalid username! Try again later...");
    System.exit(0);
} else {
}
            MethodCallExpr: userOption2.equals(usernames[i])
              NameExpr: userOption2
                SimpleName: userOption2
              SimpleName: equals
              ArrayAccessExpr: usernames[i]
                NameExpr: usernames
                  SimpleName: usernames
                NameExpr: i
                  SimpleName: i
            BlockStmt: {
    System.out.print("Enter your pin: ");
    // check if they have entered a valid pin (int)
    do {
        if (input.hasNextInt()) {
            userOption1 = input.nextInt();
            // give the user three pin attempts
            if (userOption1 == passwords[i]) {
                flag = true;
            } else {
                // increase counter to keep track of attempts
                counter++;
                // check if the user has exhausted the 3 attempts
                if (counter == 3) {
                    System.out.println("Too many attemps, Try again next time");
                    System.exit(0);
                } else {
                    System.out.print("Your entered an invalid pin! Try again: ");
                }
            }
        } else {
            flag = false;
            counter++;
            // check if the user has exhausted the 3 attempts
            if (counter == 3) {
                System.out.println("Too many attemps, Try again next time");
                System.exit(0);
            } else {
                System.out.print("Your entered an invalid pin! Try again: ");
                input.next();
            }
        }
    } while (!(flag));
    // check if the entered password matches with the one stored
    if (userOption1 == passwords[i]) {
        System.out.printf("\n************ Welcome %s ************", usernames[i]);
        // instantiate scanner object and call appropriate methods for post user login functionality
        Scanner inputThree = new Scanner(System.in);
        String currentUser = usernames[i];
        postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
        inputThree.close();
    } else {
        System.out.println("The pin you entered is incorrect! Try again later...");
        System.exit(0);
    }
    // check user existance in database
    userExists = true;
}
              ExpressionStmt: System.out.print("Enter your pin: ");
                MethodCallExpr: System.out.print("Enter your pin: ")
                  FieldAccessExpr: System.out
                    NameExpr: System
                      SimpleName: System
                    SimpleName: out
                  SimpleName: print
                  StringLiteralExpr: "Enter your pin: "
              DoStmt: // check if they have entered a valid pin (int)
do {
    if (input.hasNextInt()) {
        userOption1 = input.nextInt();
        // give the user three pin attempts
        if (userOption1 == passwords[i]) {
            flag = true;
        } else {
            // increase counter to keep track of attempts
            counter++;
            // check if the user has exhausted the 3 attempts
            if (counter == 3) {
                System.out.println("Too many attemps, Try again next time");
                System.exit(0);
            } else {
                System.out.print("Your entered an invalid pin! Try again: ");
            }
        }
    } else {
        flag = false;
        counter++;
        // check if the user has exhausted the 3 attempts
        if (counter == 3) {
            System.out.println("Too many attemps, Try again next time");
            System.exit(0);
        } else {
            System.out.print("Your entered an invalid pin! Try again: ");
            input.next();
        }
    }
} while (!(flag));
                BlockStmt: {
    if (input.hasNextInt()) {
        userOption1 = input.nextInt();
        // give the user three pin attempts
        if (userOption1 == passwords[i]) {
            flag = true;
        } else {
            // increase counter to keep track of attempts
            counter++;
            // check if the user has exhausted the 3 attempts
            if (counter == 3) {
                System.out.println("Too many attemps, Try again next time");
                System.exit(0);
            } else {
                System.out.print("Your entered an invalid pin! Try again: ");
            }
        }
    } else {
        flag = false;
        counter++;
        // check if the user has exhausted the 3 attempts
        if (counter == 3) {
            System.out.println("Too many attemps, Try again next time");
            System.exit(0);
        } else {
            System.out.print("Your entered an invalid pin! Try again: ");
            input.next();
        }
    }
}
                  IfStmt: if (input.hasNextInt()) {
    userOption1 = input.nextInt();
    // give the user three pin attempts
    if (userOption1 == passwords[i]) {
        flag = true;
    } else {
        // increase counter to keep track of attempts
        counter++;
        // check if the user has exhausted the 3 attempts
        if (counter == 3) {
            System.out.println("Too many attemps, Try again next time");
            System.exit(0);
        } else {
            System.out.print("Your entered an invalid pin! Try again: ");
        }
    }
} else {
    flag = false;
    counter++;
    // check if the user has exhausted the 3 attempts
    if (counter == 3) {
        System.out.println("Too many attemps, Try again next time");
        System.exit(0);
    } else {
        System.out.print("Your entered an invalid pin! Try again: ");
        input.next();
    }
}
                    MethodCallExpr: input.hasNextInt()
                      NameExpr: input
                        SimpleName: input
                      SimpleName: hasNextInt
                    BlockStmt: {
    userOption1 = input.nextInt();
    // give the user three pin attempts
    if (userOption1 == passwords[i]) {
        flag = true;
    } else {
        // increase counter to keep track of attempts
        counter++;
        // check if the user has exhausted the 3 attempts
        if (counter == 3) {
            System.out.println("Too many attemps, Try again next time");
            System.exit(0);
        } else {
            System.out.print("Your entered an invalid pin! Try again: ");
        }
    }
}
                      ExpressionStmt: userOption1 = input.nextInt();
                        AssignExpr: userOption1 = input.nextInt()
                          NameExpr: userOption1
                            SimpleName: userOption1
                          MethodCallExpr: input.nextInt()
                            NameExpr: input
                              SimpleName: input
                            SimpleName: nextInt
                      IfStmt: // give the user three pin attempts
if (userOption1 == passwords[i]) {
    flag = true;
} else {
    // increase counter to keep track of attempts
    counter++;
    // check if the user has exhausted the 3 attempts
    if (counter == 3) {
        System.out.println("Too many attemps, Try again next time");
        System.exit(0);
    } else {
        System.out.print("Your entered an invalid pin! Try again: ");
    }
}
                        BinaryExpr: userOption1 == passwords[i]
                          NameExpr: userOption1
                            SimpleName: userOption1
                          ArrayAccessExpr: passwords[i]
                            NameExpr: passwords
                              SimpleName: passwords
                            NameExpr: i
                              SimpleName: i
                        BlockStmt: {
    flag = true;
}
                          ExpressionStmt: flag = true;
                            AssignExpr: flag = true
                              NameExpr: flag
                                SimpleName: flag
                              BooleanLiteralExpr: true
                        BlockStmt: {
    // increase counter to keep track of attempts
    counter++;
    // check if the user has exhausted the 3 attempts
    if (counter == 3) {
        System.out.println("Too many attemps, Try again next time");
        System.exit(0);
    } else {
        System.out.print("Your entered an invalid pin! Try again: ");
    }
}
                          ExpressionStmt: // increase counter to keep track of attempts
counter++;
                            UnaryExpr: counter++
                              NameExpr: counter
                                SimpleName: counter
                          IfStmt: // check if the user has exhausted the 3 attempts
if (counter == 3) {
    System.out.println("Too many attemps, Try again next time");
    System.exit(0);
} else {
    System.out.print("Your entered an invalid pin! Try again: ");
}
                            BinaryExpr: counter == 3
                              NameExpr: counter
                                SimpleName: counter
                              IntegerLiteralExpr: 3
                            BlockStmt: {
    System.out.println("Too many attemps, Try again next time");
    System.exit(0);
}
                              ExpressionStmt: System.out.println("Too many attemps, Try again next time");
                                MethodCallExpr: System.out.println("Too many attemps, Try again next time")
                                  FieldAccessExpr: System.out
                                    NameExpr: System
                                      SimpleName: System
                                    SimpleName: out
                                  SimpleName: println
                                  StringLiteralExpr: "Too many attemps, Try again next time"
                              ExpressionStmt: System.exit(0);
                                MethodCallExpr: System.exit(0)
                                  NameExpr: System
                                    SimpleName: System
                                  SimpleName: exit
                                  IntegerLiteralExpr: 0
                            BlockStmt: {
    System.out.print("Your entered an invalid pin! Try again: ");
}
                              ExpressionStmt: System.out.print("Your entered an invalid pin! Try again: ");
                                MethodCallExpr: System.out.print("Your entered an invalid pin! Try again: ")
                                  FieldAccessExpr: System.out
                                    NameExpr: System
                                      SimpleName: System
                                    SimpleName: out
                                  SimpleName: print
                                  StringLiteralExpr: "Your entered an invalid pin! Try again: "
                    BlockStmt: {
    flag = false;
    counter++;
    // check if the user has exhausted the 3 attempts
    if (counter == 3) {
        System.out.println("Too many attemps, Try again next time");
        System.exit(0);
    } else {
        System.out.print("Your entered an invalid pin! Try again: ");
        input.next();
    }
}
                      ExpressionStmt: flag = false;
                        AssignExpr: flag = false
                          NameExpr: flag
                            SimpleName: flag
                          BooleanLiteralExpr: false
                      ExpressionStmt: counter++;
                        UnaryExpr: counter++
                          NameExpr: counter
                            SimpleName: counter
                      IfStmt: // check if the user has exhausted the 3 attempts
if (counter == 3) {
    System.out.println("Too many attemps, Try again next time");
    System.exit(0);
} else {
    System.out.print("Your entered an invalid pin! Try again: ");
    input.next();
}
                        BinaryExpr: counter == 3
                          NameExpr: counter
                            SimpleName: counter
                          IntegerLiteralExpr: 3
                        BlockStmt: {
    System.out.println("Too many attemps, Try again next time");
    System.exit(0);
}
                          ExpressionStmt: System.out.println("Too many attemps, Try again next time");
                            MethodCallExpr: System.out.println("Too many attemps, Try again next time")
                              FieldAccessExpr: System.out
                                NameExpr: System
                                  SimpleName: System
                                SimpleName: out
                              SimpleName: println
                              StringLiteralExpr: "Too many attemps, Try again next time"
                          ExpressionStmt: System.exit(0);
                            MethodCallExpr: System.exit(0)
                              NameExpr: System
                                SimpleName: System
                              SimpleName: exit
                              IntegerLiteralExpr: 0
                        BlockStmt: {
    System.out.print("Your entered an invalid pin! Try again: ");
    input.next();
}
                          ExpressionStmt: System.out.print("Your entered an invalid pin! Try again: ");
                            MethodCallExpr: System.out.print("Your entered an invalid pin! Try again: ")
                              FieldAccessExpr: System.out
                                NameExpr: System
                                  SimpleName: System
                                SimpleName: out
                              SimpleName: print
                              StringLiteralExpr: "Your entered an invalid pin! Try again: "
                          ExpressionStmt: input.next();
                            MethodCallExpr: input.next()
                              NameExpr: input
                                SimpleName: input
                              SimpleName: next
                UnaryExpr: !(flag)
                  EnclosedExpr: (flag)
                    NameExpr: flag
                      SimpleName: flag
              IfStmt: // check if the entered password matches with the one stored
if (userOption1 == passwords[i]) {
    System.out.printf("\n************ Welcome %s ************", usernames[i]);
    // instantiate scanner object and call appropriate methods for post user login functionality
    Scanner inputThree = new Scanner(System.in);
    String currentUser = usernames[i];
    postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
    inputThree.close();
} else {
    System.out.println("The pin you entered is incorrect! Try again later...");
    System.exit(0);
}
                BinaryExpr: userOption1 == passwords[i]
                  NameExpr: userOption1
                    SimpleName: userOption1
                  ArrayAccessExpr: passwords[i]
                    NameExpr: passwords
                      SimpleName: passwords
                    NameExpr: i
                      SimpleName: i
                BlockStmt: {
    System.out.printf("\n************ Welcome %s ************", usernames[i]);
    // instantiate scanner object and call appropriate methods for post user login functionality
    Scanner inputThree = new Scanner(System.in);
    String currentUser = usernames[i];
    postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
    inputThree.close();
}
                  ExpressionStmt: System.out.printf("\n************ Welcome %s ************", usernames[i]);
                    MethodCallExpr: System.out.printf("\n************ Welcome %s ************", usernames[i])
                      FieldAccessExpr: System.out
                        NameExpr: System
                          SimpleName: System
                        SimpleName: out
                      SimpleName: printf
                      StringLiteralExpr: "\n************ Welcome %s ************"
                      ArrayAccessExpr: usernames[i]
                        NameExpr: usernames
                          SimpleName: usernames
                        NameExpr: i
                          SimpleName: i
                  ExpressionStmt: // instantiate scanner object and call appropriate methods for post user login functionality
Scanner inputThree = new Scanner(System.in);
                    VariableDeclarationExpr: Scanner inputThree = new Scanner(System.in)
                      VariableDeclarator: inputThree = new Scanner(System.in)
                        ClassOrInterfaceType: Scanner
                          SimpleName: Scanner
                        SimpleName: inputThree
                        ObjectCreationExpr: new Scanner(System.in)
                          ClassOrInterfaceType: Scanner
                            SimpleName: Scanner
                          FieldAccessExpr: System.in
                            NameExpr: System
                              SimpleName: System
                            SimpleName: in
                  ExpressionStmt: String currentUser = usernames[i];
                    VariableDeclarationExpr: String currentUser = usernames[i]
                      VariableDeclarator: currentUser = usernames[i]
                        ClassOrInterfaceType: String
                          SimpleName: String
                        SimpleName: currentUser
                        ArrayAccessExpr: usernames[i]
                          NameExpr: usernames
                            SimpleName: usernames
                          NameExpr: i
                            SimpleName: i
                  ExpressionStmt: postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks);
                    MethodCallExpr: postLogin(userMenu(inputThree, currentUser), usernames, currentUser, tasks)
                      SimpleName: postLogin
                      MethodCallExpr: userMenu(inputThree, currentUser)
                        SimpleName: userMenu
                        NameExpr: inputThree
                          SimpleName: inputThree
                        NameExpr: currentUser
                          SimpleName: currentUser
                      NameExpr: usernames
                        SimpleName: usernames
                      NameExpr: currentUser
                        SimpleName: currentUser
                      NameExpr: tasks
                        SimpleName: tasks
                  ExpressionStmt: inputThree.close();
                    MethodCallExpr: inputThree.close()
                      NameExpr: inputThree
                        SimpleName: inputThree
                      SimpleName: close
                BlockStmt: {
    System.out.println("The pin you entered is incorrect! Try again later...");
    System.exit(0);
}
                  ExpressionStmt: System.out.println("The pin you entered is incorrect! Try again later...");
                    MethodCallExpr: System.out.println("The pin you entered is incorrect! Try again later...")
                      FieldAccessExpr: System.out
                        NameExpr: System
                          SimpleName: System
                        SimpleName: out
                      SimpleName: println
                      StringLiteralExpr: "The pin you entered is incorrect! Try again later..."
                  ExpressionStmt: System.exit(0);
                    MethodCallExpr: System.exit(0)
                      NameExpr: System
                        SimpleName: System
                      SimpleName: exit
                      IntegerLiteralExpr: 0
              ExpressionStmt: // check user existance in database
userExists = true;
                AssignExpr: userExists = true
                  NameExpr: userExists
                    SimpleName: userExists
                  BooleanLiteralExpr: true
            IfStmt: if (userOption2.equals("")) {
    System.out.println("Invalid username! Try again later...");
    System.exit(0);
} else {
}
              MethodCallExpr: userOption2.equals("")
                NameExpr: userOption2
                  SimpleName: userOption2
                SimpleName: equals
                StringLiteralExpr: ""
              BlockStmt: {
    System.out.println("Invalid username! Try again later...");
    System.exit(0);
}
                ExpressionStmt: System.out.println("Invalid username! Try again later...");
                  MethodCallExpr: System.out.println("Invalid username! Try again later...")
                    FieldAccessExpr: System.out
                      NameExpr: System
                        SimpleName: System
                      SimpleName: out
                    SimpleName: println
                    StringLiteralExpr: "Invalid username! Try again later..."
                ExpressionStmt: System.exit(0);
                  MethodCallExpr: System.exit(0)
                    NameExpr: System
                      SimpleName: System
                    SimpleName: exit
                    IntegerLiteralExpr: 0
              BlockStmt: {
}
      IfStmt: // check if user exists, otherwise exit the program
if (!userExists) {
    System.out.println("The username you entered does not exist! Try again later...");
    System.exit(0);
}
        UnaryExpr: !userExists
          NameExpr: userExists
            SimpleName: userExists
        BlockStmt: {
    System.out.println("The username you entered does not exist! Try again later...");
    System.exit(0);
}
          ExpressionStmt: System.out.println("The username you entered does not exist! Try again later...");
            MethodCallExpr: System.out.println("The username you entered does not exist! Try again later...")
              FieldAccessExpr: System.out
                NameExpr: System
                  SimpleName: System
                SimpleName: out
              SimpleName: println
              StringLiteralExpr: "The username you entered does not exist! Try again later..."
          ExpressionStmt: System.exit(0);
            MethodCallExpr: System.exit(0)
              NameExpr: System
                SimpleName: System
              SimpleName: exit
              IntegerLiteralExpr: 0
  MethodDeclaration: // method for functionality after user is signed in
public static void postLogin(int userOption, String[] usernames, String currentUser, String[] tasks) {
    // instatiate Scanner and initialize variables
    Scanner inputFour = new Scanner(System.in);
    int count = 0;
    boolean flag = true;
    String proceed = "n";
    String askForTask = "y";
    switch(userOption) {
        case 1:
            // check if current user is a Manager or ordinary team member
            if (currentUser == "Manager") {
                System.out.println("\n************ Assign Members Tasks ************");
                while (flag) {
                    // ask manager to assign members tasks they can pick from (Max = 5)
                    if (count != 5) {
                        System.out.print("What task do you want to assign your team? ");
                        String task = inputFour.nextLine();
                        tasks[count] = task;
                        // check if user has reached 5 tasks and terminate loop
                        if (count == 4)
                            askForTask = "n";
                    } else {
                        flag = false;
                    }
                    // check if user has reached 5 tasks
                    if (askForTask != "n") {
                        System.out.print("\nAdd another task? (y/n): ");
                        proceed = inputFour.nextLine();
                    }
                    // check if user does not want to add tasks
                    if (!proceed.equals("y")) {
                        flag = false;
                    }
                    // increase count to limit manager to only 5 tasks
                    count++;
                }
            } else {
                // output tasks for team members so that they can pick what they can do
                System.out.println("\n************ Pick One Task From The List ************");
                if (tasks[0] == null) {
                    System.out.println("There are no tasks to do yet, check back later!");
                } else {
                    for (String task : tasks) {
                        System.out.println(task);
                    }
                }
            }
            break;
        case 2:
            // check if the current user is a team manager or not and customize output accondingly
            if (currentUser == "Admin") {
                System.out.println("\nHere is your team to manage: ");
            } else {
                System.out.println("\nHere are your teammates: ");
            }
            // output team members and skip session user and Manager
            for (String username : usernames) {
                if (username.equals(currentUser) || username.equals("Manager")) {
                    continue;
                }
                System.out.println(username);
            }
            break;
        case 3:
            System.out.println("You have succefully been logged out, see you soon!");
            System.exit(0);
        default:
            System.out.println("You entered an option that does exist! you have been logged ou, try again later...");
            System.exit(0);
    }
    // close Scanner to avoid resource leak
    inputFour.close();
}
    Modifier: public 
    Modifier: static 
    SimpleName: postLogin
    Parameter: int userOption
      PrimitiveType: int
      SimpleName: userOption
    Parameter: String[] usernames
      ArrayType: String[]
        ClassOrInterfaceType: String
          SimpleName: String
      SimpleName: usernames
    Parameter: String currentUser
      ClassOrInterfaceType: String
        SimpleName: String
      SimpleName: currentUser
    Parameter: String[] tasks
      ArrayType: String[]
        ClassOrInterfaceType: String
          SimpleName: String
      SimpleName: tasks
    VoidType: void
    BlockStmt: {
    // instatiate Scanner and initialize variables
    Scanner inputFour = new Scanner(System.in);
    int count = 0;
    boolean flag = true;
    String proceed = "n";
    String askForTask = "y";
    switch(userOption) {
        case 1:
            // check if current user is a Manager or ordinary team member
            if (currentUser == "Manager") {
                System.out.println("\n************ Assign Members Tasks ************");
                while (flag) {
                    // ask manager to assign members tasks they can pick from (Max = 5)
                    if (count != 5) {
                        System.out.print("What task do you want to assign your team? ");
                        String task = inputFour.nextLine();
                        tasks[count] = task;
                        // check if user has reached 5 tasks and terminate loop
                        if (count == 4)
                            askForTask = "n";
                    } else {
                        flag = false;
                    }
                    // check if user has reached 5 tasks
                    if (askForTask != "n") {
                        System.out.print("\nAdd another task? (y/n): ");
                        proceed = inputFour.nextLine();
                    }
                    // check if user does not want to add tasks
                    if (!proceed.equals("y")) {
                        flag = false;
                    }
                    // increase count to limit manager to only 5 tasks
                    count++;
                }
            } else {
                // output tasks for team members so that they can pick what they can do
                System.out.println("\n************ Pick One Task From The List ************");
                if (tasks[0] == null) {
                    System.out.println("There are no tasks to do yet, check back later!");
                } else {
                    for (String task : tasks) {
                        System.out.println(task);
                    }
                }
            }
            break;
        case 2:
            // check if the current user is a team manager or not and customize output accondingly
            if (currentUser == "Admin") {
                System.out.println("\nHere is your team to manage: ");
            } else {
                System.out.println("\nHere are your teammates: ");
            }
            // output team members and skip session user and Manager
            for (String username : usernames) {
                if (username.equals(currentUser) || username.equals("Manager")) {
                    continue;
                }
                System.out.println(username);
            }
            break;
        case 3:
            System.out.println("You have succefully been logged out, see you soon!");
            System.exit(0);
        default:
            System.out.println("You entered an option that does exist! you have been logged ou, try again later...");
            System.exit(0);
    }
    // close Scanner to avoid resource leak
    inputFour.close();
}
      ExpressionStmt: // instatiate Scanner and initialize variables
Scanner inputFour = new Scanner(System.in);
        VariableDeclarationExpr: Scanner inputFour = new Scanner(System.in)
          VariableDeclarator: inputFour = new Scanner(System.in)
            ClassOrInterfaceType: Scanner
              SimpleName: Scanner
            SimpleName: inputFour
            ObjectCreationExpr: new Scanner(System.in)
              ClassOrInterfaceType: Scanner
                SimpleName: Scanner
              FieldAccessExpr: System.in
                NameExpr: System
                  SimpleName: System
                SimpleName: in
      ExpressionStmt: int count = 0;
        VariableDeclarationExpr: int count = 0
          VariableDeclarator: count = 0
            PrimitiveType: int
            SimpleName: count
            IntegerLiteralExpr: 0
      ExpressionStmt: boolean flag = true;
        VariableDeclarationExpr: boolean flag = true
          VariableDeclarator: flag = true
            PrimitiveType: boolean
            SimpleName: flag
            BooleanLiteralExpr: true
      ExpressionStmt: String proceed = "n";
        VariableDeclarationExpr: String proceed = "n"
          VariableDeclarator: proceed = "n"
            ClassOrInterfaceType: String
              SimpleName: String
            SimpleName: proceed
            StringLiteralExpr: "n"
      ExpressionStmt: String askForTask = "y";
        VariableDeclarationExpr: String askForTask = "y"
          VariableDeclarator: askForTask = "y"
            ClassOrInterfaceType: String
              SimpleName: String
            SimpleName: askForTask
            StringLiteralExpr: "y"
      SwitchStmt: switch(userOption) {
    case 1:
        // check if current user is a Manager or ordinary team member
        if (currentUser == "Manager") {
            System.out.println("\n************ Assign Members Tasks ************");
            while (flag) {
                // ask manager to assign members tasks they can pick from (Max = 5)
                if (count != 5) {
                    System.out.print("What task do you want to assign your team? ");
                    String task = inputFour.nextLine();
                    tasks[count] = task;
                    // check if user has reached 5 tasks and terminate loop
                    if (count == 4)
                        askForTask = "n";
                } else {
                    flag = false;
                }
                // check if user has reached 5 tasks
                if (askForTask != "n") {
                    System.out.print("\nAdd another task? (y/n): ");
                    proceed = inputFour.nextLine();
                }
                // check if user does not want to add tasks
                if (!proceed.equals("y")) {
                    flag = false;
                }
                // increase count to limit manager to only 5 tasks
                count++;
            }
        } else {
            // output tasks for team members so that they can pick what they can do
            System.out.println("\n************ Pick One Task From The List ************");
            if (tasks[0] == null) {
                System.out.println("There are no tasks to do yet, check back later!");
            } else {
                for (String task : tasks) {
                    System.out.println(task);
                }
            }
        }
        break;
    case 2:
        // check if the current user is a team manager or not and customize output accondingly
        if (currentUser == "Admin") {
            System.out.println("\nHere is your team to manage: ");
        } else {
            System.out.println("\nHere are your teammates: ");
        }
        // output team members and skip session user and Manager
        for (String username : usernames) {
            if (username.equals(currentUser) || username.equals("Manager")) {
                continue;
            }
            System.out.println(username);
        }
        break;
    case 3:
        System.out.println("You have succefully been logged out, see you soon!");
        System.exit(0);
    default:
        System.out.println("You entered an option that does exist! you have been logged ou, try again later...");
        System.exit(0);
}
        NameExpr: userOption
          SimpleName: userOption
        SwitchEntry: case 1:
    // check if current user is a Manager or ordinary team member
    if (currentUser == "Manager") {
        System.out.println("\n************ Assign Members Tasks ************");
        while (flag) {
            // ask manager to assign members tasks they can pick from (Max = 5)
            if (count != 5) {
                System.out.print("What task do you want to assign your team? ");
                String task = inputFour.nextLine();
                tasks[count] = task;
                // check if user has reached 5 tasks and terminate loop
                if (count == 4)
                    askForTask = "n";
            } else {
                flag = false;
            }
            // check if user has reached 5 tasks
            if (askForTask != "n") {
                System.out.print("\nAdd another task? (y/n): ");
                proceed = inputFour.nextLine();
            }
            // check if user does not want to add tasks
            if (!proceed.equals("y")) {
                flag = false;
            }
            // increase count to limit manager to only 5 tasks
            count++;
        }
    } else {
        // output tasks for team members so that they can pick what they can do
        System.out.println("\n************ Pick One Task From The List ************");
        if (tasks[0] == null) {
            System.out.println("There are no tasks to do yet, check back later!");
        } else {
            for (String task : tasks) {
                System.out.println(task);
            }
        }
    }
    break;

          IntegerLiteralExpr: 1
          IfStmt: // check if current user is a Manager or ordinary team member
if (currentUser == "Manager") {
    System.out.println("\n************ Assign Members Tasks ************");
    while (flag) {
        // ask manager to assign members tasks they can pick from (Max = 5)
        if (count != 5) {
            System.out.print("What task do you want to assign your team? ");
            String task = inputFour.nextLine();
            tasks[count] = task;
            // check if user has reached 5 tasks and terminate loop
            if (count == 4)
                askForTask = "n";
        } else {
            flag = false;
        }
        // check if user has reached 5 tasks
        if (askForTask != "n") {
            System.out.print("\nAdd another task? (y/n): ");
            proceed = inputFour.nextLine();
        }
        // check if user does not want to add tasks
        if (!proceed.equals("y")) {
            flag = false;
        }
        // increase count to limit manager to only 5 tasks
        count++;
    }
} else {
    // output tasks for team members so that they can pick what they can do
    System.out.println("\n************ Pick One Task From The List ************");
    if (tasks[0] == null) {
        System.out.println("There are no tasks to do yet, check back later!");
    } else {
        for (String task : tasks) {
            System.out.println(task);
        }
    }
}
            BinaryExpr: currentUser == "Manager"
              NameExpr: currentUser
                SimpleName: currentUser
              StringLiteralExpr: "Manager"
            BlockStmt: {
    System.out.println("\n************ Assign Members Tasks ************");
    while (flag) {
        // ask manager to assign members tasks they can pick from (Max = 5)
        if (count != 5) {
            System.out.print("What task do you want to assign your team? ");
            String task = inputFour.nextLine();
            tasks[count] = task;
            // check if user has reached 5 tasks and terminate loop
            if (count == 4)
                askForTask = "n";
        } else {
            flag = false;
        }
        // check if user has reached 5 tasks
        if (askForTask != "n") {
            System.out.print("\nAdd another task? (y/n): ");
            proceed = inputFour.nextLine();
        }
        // check if user does not want to add tasks
        if (!proceed.equals("y")) {
            flag = false;
        }
        // increase count to limit manager to only 5 tasks
        count++;
    }
}
              ExpressionStmt: System.out.println("\n************ Assign Members Tasks ************");
                MethodCallExpr: System.out.println("\n************ Assign Members Tasks ************")
                  FieldAccessExpr: System.out
                    NameExpr: System
                      SimpleName: System
                    SimpleName: out
                  SimpleName: println
                  StringLiteralExpr: "\n************ Assign Members Tasks ************"
              WhileStmt: while (flag) {
    // ask manager to assign members tasks they can pick from (Max = 5)
    if (count != 5) {
        System.out.print("What task do you want to assign your team? ");
        String task = inputFour.nextLine();
        tasks[count] = task;
        // check if user has reached 5 tasks and terminate loop
        if (count == 4)
            askForTask = "n";
    } else {
        flag = false;
    }
    // check if user has reached 5 tasks
    if (askForTask != "n") {
        System.out.print("\nAdd another task? (y/n): ");
        proceed = inputFour.nextLine();
    }
    // check if user does not want to add tasks
    if (!proceed.equals("y")) {
        flag = false;
    }
    // increase count to limit manager to only 5 tasks
    count++;
}
                NameExpr: flag
                  SimpleName: flag
                BlockStmt: {
    // ask manager to assign members tasks they can pick from (Max = 5)
    if (count != 5) {
        System.out.print("What task do you want to assign your team? ");
        String task = inputFour.nextLine();
        tasks[count] = task;
        // check if user has reached 5 tasks and terminate loop
        if (count == 4)
            askForTask = "n";
    } else {
        flag = false;
    }
    // check if user has reached 5 tasks
    if (askForTask != "n") {
        System.out.print("\nAdd another task? (y/n): ");
        proceed = inputFour.nextLine();
    }
    // check if user does not want to add tasks
    if (!proceed.equals("y")) {
        flag = false;
    }
    // increase count to limit manager to only 5 tasks
    count++;
}
                  IfStmt: // ask manager to assign members tasks they can pick from (Max = 5)
if (count != 5) {
    System.out.print("What task do you want to assign your team? ");
    String task = inputFour.nextLine();
    tasks[count] = task;
    // check if user has reached 5 tasks and terminate loop
    if (count == 4)
        askForTask = "n";
} else {
    flag = false;
}
                    BinaryExpr: count != 5
                      NameExpr: count
                        SimpleName: count
                      IntegerLiteralExpr: 5
                    BlockStmt: {
    System.out.print("What task do you want to assign your team? ");
    String task = inputFour.nextLine();
    tasks[count] = task;
    // check if user has reached 5 tasks and terminate loop
    if (count == 4)
        askForTask = "n";
}
                      ExpressionStmt: System.out.print("What task do you want to assign your team? ");
                        MethodCallExpr: System.out.print("What task do you want to assign your team? ")
                          FieldAccessExpr: System.out
                            NameExpr: System
                              SimpleName: System
                            SimpleName: out
                          SimpleName: print
                          StringLiteralExpr: "What task do you want to assign your team? "
                      ExpressionStmt: String task = inputFour.nextLine();
                        VariableDeclarationExpr: String task = inputFour.nextLine()
                          VariableDeclarator: task = inputFour.nextLine()
                            ClassOrInterfaceType: String
                              SimpleName: String
                            SimpleName: task
                            MethodCallExpr: inputFour.nextLine()
                              NameExpr: inputFour
                                SimpleName: inputFour
                              SimpleName: nextLine
                      ExpressionStmt: tasks[count] = task;
                        AssignExpr: tasks[count] = task
                          ArrayAccessExpr: tasks[count]
                            NameExpr: tasks
                              SimpleName: tasks
                            NameExpr: count
                              SimpleName: count
                          NameExpr: task
                            SimpleName: task
                      IfStmt: // check if user has reached 5 tasks and terminate loop
if (count == 4)
    askForTask = "n";
                        BinaryExpr: count == 4
                          NameExpr: count
                            SimpleName: count
                          IntegerLiteralExpr: 4
                        ExpressionStmt: askForTask = "n";
                          AssignExpr: askForTask = "n"
                            NameExpr: askForTask
                              SimpleName: askForTask
                            StringLiteralExpr: "n"
                    BlockStmt: {
    flag = false;
}
                      ExpressionStmt: flag = false;
                        AssignExpr: flag = false
                          NameExpr: flag
                            SimpleName: flag
                          BooleanLiteralExpr: false
                  IfStmt: // check if user has reached 5 tasks
if (askForTask != "n") {
    System.out.print("\nAdd another task? (y/n): ");
    proceed = inputFour.nextLine();
}
                    BinaryExpr: askForTask != "n"
                      NameExpr: askForTask
                        SimpleName: askForTask
                      StringLiteralExpr: "n"
                    BlockStmt: {
    System.out.print("\nAdd another task? (y/n): ");
    proceed = inputFour.nextLine();
}
                      ExpressionStmt: System.out.print("\nAdd another task? (y/n): ");
                        MethodCallExpr: System.out.print("\nAdd another task? (y/n): ")
                          FieldAccessExpr: System.out
                            NameExpr: System
                              SimpleName: System
                            SimpleName: out
                          SimpleName: print
                          StringLiteralExpr: "\nAdd another task? (y/n): "
                      ExpressionStmt: proceed = inputFour.nextLine();
                        AssignExpr: proceed = inputFour.nextLine()
                          NameExpr: proceed
                            SimpleName: proceed
                          MethodCallExpr: inputFour.nextLine()
                            NameExpr: inputFour
                              SimpleName: inputFour
                            SimpleName: nextLine
                  IfStmt: // check if user does not want to add tasks
if (!proceed.equals("y")) {
    flag = false;
}
                    UnaryExpr: !proceed.equals("y")
                      MethodCallExpr: proceed.equals("y")
                        NameExpr: proceed
                          SimpleName: proceed
                        SimpleName: equals
                        StringLiteralExpr: "y"
                    BlockStmt: {
    flag = false;
}
                      ExpressionStmt: flag = false;
                        AssignExpr: flag = false
                          NameExpr: flag
                            SimpleName: flag
                          BooleanLiteralExpr: false
                  ExpressionStmt: // increase count to limit manager to only 5 tasks
count++;
                    UnaryExpr: count++
                      NameExpr: count
                        SimpleName: count
            BlockStmt: {
    // output tasks for team members so that they can pick what they can do
    System.out.println("\n************ Pick One Task From The List ************");
    if (tasks[0] == null) {
        System.out.println("There are no tasks to do yet, check back later!");
    } else {
        for (String task : tasks) {
            System.out.println(task);
        }
    }
}
              ExpressionStmt: // output tasks for team members so that they can pick what they can do
System.out.println("\n************ Pick One Task From The List ************");
                MethodCallExpr: System.out.println("\n************ Pick One Task From The List ************")
                  FieldAccessExpr: System.out
                    NameExpr: System
                      SimpleName: System
                    SimpleName: out
                  SimpleName: println
                  StringLiteralExpr: "\n************ Pick One Task From The List ************"
              IfStmt: if (tasks[0] == null) {
    System.out.println("There are no tasks to do yet, check back later!");
} else {
    for (String task : tasks) {
        System.out.println(task);
    }
}
                BinaryExpr: tasks[0] == null
                  ArrayAccessExpr: tasks[0]
                    NameExpr: tasks
                      SimpleName: tasks
                    IntegerLiteralExpr: 0
                  NullLiteralExpr: null
                BlockStmt: {
    System.out.println("There are no tasks to do yet, check back later!");
}
                  ExpressionStmt: System.out.println("There are no tasks to do yet, check back later!");
                    MethodCallExpr: System.out.println("There are no tasks to do yet, check back later!")
                      FieldAccessExpr: System.out
                        NameExpr: System
                          SimpleName: System
                        SimpleName: out
                      SimpleName: println
                      StringLiteralExpr: "There are no tasks to do yet, check back later!"
                BlockStmt: {
    for (String task : tasks) {
        System.out.println(task);
    }
}
                  ForEachStmt: for (String task : tasks) {
    System.out.println(task);
}
                    VariableDeclarationExpr: String task
                      VariableDeclarator: task
                        ClassOrInterfaceType: String
                          SimpleName: String
                        SimpleName: task
                    NameExpr: tasks
                      SimpleName: tasks
                    BlockStmt: {
    System.out.println(task);
}
                      ExpressionStmt: System.out.println(task);
                        MethodCallExpr: System.out.println(task)
                          FieldAccessExpr: System.out
                            NameExpr: System
                              SimpleName: System
                            SimpleName: out
                          SimpleName: println
                          NameExpr: task
                            SimpleName: task
          BreakStmt: break;
        SwitchEntry: case 2:
    // check if the current user is a team manager or not and customize output accondingly
    if (currentUser == "Admin") {
        System.out.println("\nHere is your team to manage: ");
    } else {
        System.out.println("\nHere are your teammates: ");
    }
    // output team members and skip session user and Manager
    for (String username : usernames) {
        if (username.equals(currentUser) || username.equals("Manager")) {
            continue;
        }
        System.out.println(username);
    }
    break;

          IntegerLiteralExpr: 2
          IfStmt: // check if the current user is a team manager or not and customize output accondingly
if (currentUser == "Admin") {
    System.out.println("\nHere is your team to manage: ");
} else {
    System.out.println("\nHere are your teammates: ");
}
            BinaryExpr: currentUser == "Admin"
              NameExpr: currentUser
                SimpleName: currentUser
              StringLiteralExpr: "Admin"
            BlockStmt: {
    System.out.println("\nHere is your team to manage: ");
}
              ExpressionStmt: System.out.println("\nHere is your team to manage: ");
                MethodCallExpr: System.out.println("\nHere is your team to manage: ")
                  FieldAccessExpr: System.out
                    NameExpr: System
                      SimpleName: System
                    SimpleName: out
                  SimpleName: println
                  StringLiteralExpr: "\nHere is your team to manage: "
            BlockStmt: {
    System.out.println("\nHere are your teammates: ");
}
              ExpressionStmt: System.out.println("\nHere are your teammates: ");
                MethodCallExpr: System.out.println("\nHere are your teammates: ")
                  FieldAccessExpr: System.out
                    NameExpr: System
                      SimpleName: System
                    SimpleName: out
                  SimpleName: println
                  StringLiteralExpr: "\nHere are your teammates: "
          ForEachStmt: // output team members and skip session user and Manager
for (String username : usernames) {
    if (username.equals(currentUser) || username.equals("Manager")) {
        continue;
    }
    System.out.println(username);
}
            VariableDeclarationExpr: String username
              VariableDeclarator: username
                ClassOrInterfaceType: String
                  SimpleName: String
                SimpleName: username
            NameExpr: usernames
              SimpleName: usernames
            BlockStmt: {
    if (username.equals(currentUser) || username.equals("Manager")) {
        continue;
    }
    System.out.println(username);
}
              IfStmt: if (username.equals(currentUser) || username.equals("Manager")) {
    continue;
}
                BinaryExpr: username.equals(currentUser) || username.equals("Manager")
                  MethodCallExpr: username.equals(currentUser)
                    NameExpr: username
                      SimpleName: username
                    SimpleName: equals
                    NameExpr: currentUser
                      SimpleName: currentUser
                  MethodCallExpr: username.equals("Manager")
                    NameExpr: username
                      SimpleName: username
                    SimpleName: equals
                    StringLiteralExpr: "Manager"
                BlockStmt: {
    continue;
}
                  ContinueStmt: continue;
              ExpressionStmt: System.out.println(username);
                MethodCallExpr: System.out.println(username)
                  FieldAccessExpr: System.out
                    NameExpr: System
                      SimpleName: System
                    SimpleName: out
                  SimpleName: println
                  NameExpr: username
                    SimpleName: username
          BreakStmt: break;
        SwitchEntry: case 3:
    System.out.println("You have succefully been logged out, see you soon!");
    System.exit(0);

          IntegerLiteralExpr: 3
          ExpressionStmt: System.out.println("You have succefully been logged out, see you soon!");
            MethodCallExpr: System.out.println("You have succefully been logged out, see you soon!")
              FieldAccessExpr: System.out
                NameExpr: System
                  SimpleName: System
                SimpleName: out
              SimpleName: println
              StringLiteralExpr: "You have succefully been logged out, see you soon!"
          ExpressionStmt: System.exit(0);
            MethodCallExpr: System.exit(0)
              NameExpr: System
                SimpleName: System
              SimpleName: exit
              IntegerLiteralExpr: 0
        SwitchEntry: default:
    System.out.println("You entered an option that does exist! you have been logged ou, try again later...");
    System.exit(0);

          ExpressionStmt: System.out.println("You entered an option that does exist! you have been logged ou, try again later...");
            MethodCallExpr: System.out.println("You entered an option that does exist! you have been logged ou, try again later...")
              FieldAccessExpr: System.out
                NameExpr: System
                  SimpleName: System
                SimpleName: out
              SimpleName: println
              StringLiteralExpr: "You entered an option that does exist! you have been logged ou, try again later..."
          ExpressionStmt: System.exit(0);
            MethodCallExpr: System.exit(0)
              NameExpr: System
                SimpleName: System
              SimpleName: exit
              IntegerLiteralExpr: 0
      ExpressionStmt: // close Scanner to avoid resource leak
inputFour.close();
        MethodCallExpr: inputFour.close()
          NameExpr: inputFour
            SimpleName: inputFour
          SimpleName: close
  MethodDeclaration: // method for post login user menu
public static int userMenu(Scanner input, String currentUser) {
    // initialize some useful variables
    boolean flag = false;
    int userOption = 0;
    // view team members, view tasks, logout and menu customization based on user privillage
    if (currentUser.equals("Manager")) {
        System.out.print("\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? ");
    } else {
        System.out.print("\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? ");
    }
    // check if user has entered a valid option
    do {
        if (input.hasNextInt()) {
            userOption = input.nextInt();
            // check if the option is on the menu
            if (userOption == 1 || userOption == 2 || userOption == 3) {
                flag = true;
            } else {
                System.out.print("You entered an invalid option! Try again: ");
            }
        } else {
            flag = false;
            System.out.print("You entered an invalid option! Try again: ");
            input.next();
        }
    } while (!(flag));
    // return user option
    return userOption;
}
    Modifier: public 
    Modifier: static 
    SimpleName: userMenu
    Parameter: Scanner input
      ClassOrInterfaceType: Scanner
        SimpleName: Scanner
      SimpleName: input
    Parameter: String currentUser
      ClassOrInterfaceType: String
        SimpleName: String
      SimpleName: currentUser
    PrimitiveType: int
    BlockStmt: {
    // initialize some useful variables
    boolean flag = false;
    int userOption = 0;
    // view team members, view tasks, logout and menu customization based on user privillage
    if (currentUser.equals("Manager")) {
        System.out.print("\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? ");
    } else {
        System.out.print("\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? ");
    }
    // check if user has entered a valid option
    do {
        if (input.hasNextInt()) {
            userOption = input.nextInt();
            // check if the option is on the menu
            if (userOption == 1 || userOption == 2 || userOption == 3) {
                flag = true;
            } else {
                System.out.print("You entered an invalid option! Try again: ");
            }
        } else {
            flag = false;
            System.out.print("You entered an invalid option! Try again: ");
            input.next();
        }
    } while (!(flag));
    // return user option
    return userOption;
}
      ExpressionStmt: // initialize some useful variables
boolean flag = false;
        VariableDeclarationExpr: boolean flag = false
          VariableDeclarator: flag = false
            PrimitiveType: boolean
            SimpleName: flag
            BooleanLiteralExpr: false
      ExpressionStmt: int userOption = 0;
        VariableDeclarationExpr: int userOption = 0
          VariableDeclarator: userOption = 0
            PrimitiveType: int
            SimpleName: userOption
            IntegerLiteralExpr: 0
      IfStmt: // view team members, view tasks, logout and menu customization based on user privillage
if (currentUser.equals("Manager")) {
    System.out.print("\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? ");
} else {
    System.out.print("\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? ");
}
        MethodCallExpr: currentUser.equals("Manager")
          NameExpr: currentUser
            SimpleName: currentUser
          SimpleName: equals
          StringLiteralExpr: "Manager"
        BlockStmt: {
    System.out.print("\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? ");
}
          ExpressionStmt: System.out.print("\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? ");
            MethodCallExpr: System.out.print("\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? ")
              FieldAccessExpr: System.out
                NameExpr: System
                  SimpleName: System
                SimpleName: out
              SimpleName: print
              StringLiteralExpr: "\nHere is your menu:\n 1. Assign your team some tasks\n 2. View your team\n 3. logout\n Whats your choice? "
        BlockStmt: {
    System.out.print("\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? ");
}
          ExpressionStmt: System.out.print("\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? ");
            MethodCallExpr: System.out.print("\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? ")
              FieldAccessExpr: System.out
                NameExpr: System
                  SimpleName: System
                SimpleName: out
              SimpleName: print
              StringLiteralExpr: "\nHere is your menu:\n 1. View assigned tasks\n 2. View teammates\n 3. logout\n Whats your choice? "
      DoStmt: // check if user has entered a valid option
do {
    if (input.hasNextInt()) {
        userOption = input.nextInt();
        // check if the option is on the menu
        if (userOption == 1 || userOption == 2 || userOption == 3) {
            flag = true;
        } else {
            System.out.print("You entered an invalid option! Try again: ");
        }
    } else {
        flag = false;
        System.out.print("You entered an invalid option! Try again: ");
        input.next();
    }
} while (!(flag));
        BlockStmt: {
    if (input.hasNextInt()) {
        userOption = input.nextInt();
        // check if the option is on the menu
        if (userOption == 1 || userOption == 2 || userOption == 3) {
            flag = true;
        } else {
            System.out.print("You entered an invalid option! Try again: ");
        }
    } else {
        flag = false;
        System.out.print("You entered an invalid option! Try again: ");
        input.next();
    }
}
          IfStmt: if (input.hasNextInt()) {
    userOption = input.nextInt();
    // check if the option is on the menu
    if (userOption == 1 || userOption == 2 || userOption == 3) {
        flag = true;
    } else {
        System.out.print("You entered an invalid option! Try again: ");
    }
} else {
    flag = false;
    System.out.print("You entered an invalid option! Try again: ");
    input.next();
}
            MethodCallExpr: input.hasNextInt()
              NameExpr: input
                SimpleName: input
              SimpleName: hasNextInt
            BlockStmt: {
    userOption = input.nextInt();
    // check if the option is on the menu
    if (userOption == 1 || userOption == 2 || userOption == 3) {
        flag = true;
    } else {
        System.out.print("You entered an invalid option! Try again: ");
    }
}
              ExpressionStmt: userOption = input.nextInt();
                AssignExpr: userOption = input.nextInt()
                  NameExpr: userOption
                    SimpleName: userOption
                  MethodCallExpr: input.nextInt()
                    NameExpr: input
                      SimpleName: input
                    SimpleName: nextInt
              IfStmt: // check if the option is on the menu
if (userOption == 1 || userOption == 2 || userOption == 3) {
    flag = true;
} else {
    System.out.print("You entered an invalid option! Try again: ");
}
                BinaryExpr: userOption == 1 || userOption == 2 || userOption == 3
                  BinaryExpr: userOption == 1 || userOption == 2
                    BinaryExpr: userOption == 1
                      NameExpr: userOption
                        SimpleName: userOption
                      IntegerLiteralExpr: 1
                    BinaryExpr: userOption == 2
                      NameExpr: userOption
                        SimpleName: userOption
                      IntegerLiteralExpr: 2
                  BinaryExpr: userOption == 3
                    NameExpr: userOption
                      SimpleName: userOption
                    IntegerLiteralExpr: 3
                BlockStmt: {
    flag = true;
}
                  ExpressionStmt: flag = true;
                    AssignExpr: flag = true
                      NameExpr: flag
                        SimpleName: flag
                      BooleanLiteralExpr: true
                BlockStmt: {
    System.out.print("You entered an invalid option! Try again: ");
}
                  ExpressionStmt: System.out.print("You entered an invalid option! Try again: ");
                    MethodCallExpr: System.out.print("You entered an invalid option! Try again: ")
                      FieldAccessExpr: System.out
                        NameExpr: System
                          SimpleName: System
                        SimpleName: out
                      SimpleName: print
                      StringLiteralExpr: "You entered an invalid option! Try again: "
            BlockStmt: {
    flag = false;
    System.out.print("You entered an invalid option! Try again: ");
    input.next();
}
              ExpressionStmt: flag = false;
                AssignExpr: flag = false
                  NameExpr: flag
                    SimpleName: flag
                  BooleanLiteralExpr: false
              ExpressionStmt: System.out.print("You entered an invalid option! Try again: ");
                MethodCallExpr: System.out.print("You entered an invalid option! Try again: ")
                  FieldAccessExpr: System.out
                    NameExpr: System
                      SimpleName: System
                    SimpleName: out
                  SimpleName: print
                  StringLiteralExpr: "You entered an invalid option! Try again: "
              ExpressionStmt: input.next();
                MethodCallExpr: input.next()
                  NameExpr: input
                    SimpleName: input
                  SimpleName: next
        UnaryExpr: !(flag)
          EnclosedExpr: (flag)
            NameExpr: flag
              SimpleName: flag
      ReturnStmt: // return user option
return userOption;
        NameExpr: userOption
          SimpleName: userOption
  MethodDeclaration: // method for the help menu
public static void help() {
    // tackle some FAQ's, more can be added of course
    System.out.println("\n************ Welcome to the help Menu ************");
    System.out.println("Here are some of the frequently asked questions (FAQ's): ");
    System.out.println("What is this program used for? ");
    System.out.println("Team Manager is a program used to manage small teams, usually 5, and enable them to work efficiently.");
}
    Modifier: public 
    Modifier: static 
    SimpleName: help
    VoidType: void
    BlockStmt: {
    // tackle some FAQ's, more can be added of course
    System.out.println("\n************ Welcome to the help Menu ************");
    System.out.println("Here are some of the frequently asked questions (FAQ's): ");
    System.out.println("What is this program used for? ");
    System.out.println("Team Manager is a program used to manage small teams, usually 5, and enable them to work efficiently.");
}
      ExpressionStmt: // tackle some FAQ's, more can be added of course
System.out.println("\n************ Welcome to the help Menu ************");
        MethodCallExpr: System.out.println("\n************ Welcome to the help Menu ************")
          FieldAccessExpr: System.out
            NameExpr: System
              SimpleName: System
            SimpleName: out
          SimpleName: println
          StringLiteralExpr: "\n************ Welcome to the help Menu ************"
      ExpressionStmt: System.out.println("Here are some of the frequently asked questions (FAQ's): ");
        MethodCallExpr: System.out.println("Here are some of the frequently asked questions (FAQ's): ")
          FieldAccessExpr: System.out
            NameExpr: System
              SimpleName: System
            SimpleName: out
          SimpleName: println
          StringLiteralExpr: "Here are some of the frequently asked questions (FAQ's): "
      ExpressionStmt: System.out.println("What is this program used for? ");
        MethodCallExpr: System.out.println("What is this program used for? ")
          FieldAccessExpr: System.out
            NameExpr: System
              SimpleName: System
            SimpleName: out
          SimpleName: println
          StringLiteralExpr: "What is this program used for? "
      ExpressionStmt: System.out.println("Team Manager is a program used to manage small teams, usually 5, and enable them to work efficiently.");
        MethodCallExpr: System.out.println("Team Manager is a program used to manage small teams, usually 5, and enable them to work efficiently.")
          FieldAccessExpr: System.out
            NameExpr: System
              SimpleName: System
            SimpleName: out
          SimpleName: println
          StringLiteralExpr: "Team Manager is a program used to manage small teams, usually 5, and enable them to work efficiently."